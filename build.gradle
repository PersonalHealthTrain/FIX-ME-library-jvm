buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:1.7.2'
    }
}

import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id "com.diffplug.gradle.spotless" version "3.16.0"
    id "org.jetbrains.dokka" version "0.9.17"
    id 'maven-publish'
}

group 'de.difuture.ekut.pht'
version '0.9.1'

repositories {
    jcenter()

    // That is where the JDregistry is currently hosted
    maven {
        url  "https://dl.bintray.com/lukaszimmermann/jdregistry"
    }

    // We need that for more extension functions for Kotlin classes in the stdlib
    maven {
        url  "https://dl.bintray.com/lukaszimmermann/lukaszimmermann"
    }
}

dependencies {

    // Dependencies for Kotlin on the JVM
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.3.20'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.9.8'

    // Extension functions for Kotlin stdlib classes
    implementation group: 'kotlinext', name: 'string', version: '4.0'
    implementation group: 'kotlinext', name: 'map', version: '1.0'

    // The Data classes for the Docker Daemon
    implementation group: 'dockerdaemon', name: 'data', version: '1.0'

    // Docker Registry Data classes
    implementation "jdregistry.client:data:0.0.7"
    implementation group: 'jdregistry.client', name: 'api', version: '0.0.9'

    // Docker Client from Spotify
    implementation 'com.spotify:docker-client:8.15.0'

    // Such that we can provide bindings for hibernate
    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'

    // Use the Kotlin test library
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

apply plugin: 'jacoco'
apply plugin: 'org.ajoberstar.grgit'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

spotless {
    kotlin {
        ktlint()
    }
}

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

/*
 * Publish as Maven Artifact
 */
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/lib-0.9.1.pom")
    }
}

/*
 * Enable source and javadoc for Maven publish
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task dokkaJavadoc(type: DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task submodulesUpdate(type:Exec) {
    description 'Updates (and inits) git submodules'
    commandLine 'git', 'submodule', 'update', '--init', '--recursive', '--remote'
    group 'Build Setup'
}

check.dependsOn submodulesUpdate
